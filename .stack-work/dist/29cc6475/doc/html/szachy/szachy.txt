-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/szachy#readme</a>
@package szachy
@version 0.1.0.0


module Board
data Piece
Piece :: PColor -> PType -> Piece
[colorof] :: Piece -> PColor
[typeof] :: Piece -> PType
data Field
Field :: [Char] -> Piece -> Field
[coords] :: Field -> [Char]
[piece] :: Field -> Piece
data Board
Board :: [Field] -> Board
[fields] :: Board -> [Field]
data PType
King :: PType
Queen :: PType
Rook :: PType
Bishop :: PType
Knight :: PType
Pawn :: PType
NoType :: PType
data PColor
White :: PColor
Black :: PColor
NoColor :: PColor
drawBoard :: Board -> String
initialBoard :: Board
updateFields :: Board -> Field -> Field -> Board
sortFields :: Board -> [[Piece]]

-- | <ul>
--   <li><i><tt>whatPiece</tt></i> Takes a list of a board fields, and
--   coordinates, then iterates the fields' list in search for the exact
--   coordinates. Returns the Piece data of the coordinate.</li>
--   </ul>
whatPiece :: [Field] -> [Char] -> Piece
otherPlayer :: PColor -> PColor
instance GHC.Show.Show Board.Board
instance GHC.Show.Show Board.Field
instance GHC.Classes.Eq Board.Piece
instance GHC.Classes.Eq Board.PType
instance GHC.Show.Show Board.PType
instance GHC.Classes.Eq Board.PColor
instance GHC.Show.Show Board.PColor
instance Test.QuickCheck.Arbitrary.Arbitrary Board.Board
instance Test.QuickCheck.Arbitrary.Arbitrary Board.Field
instance Test.QuickCheck.Arbitrary.Arbitrary Board.Piece
instance GHC.Show.Show Board.Piece
instance Test.QuickCheck.Arbitrary.Arbitrary Board.PType
instance Test.QuickCheck.Arbitrary.Arbitrary Board.PColor


module Checker

-- | <ul>
--   <li><i><tt>checkMove</tt></i> Takes a board, starting field
--   coordinates, target field coordinates, current starting field Piece,
--   current target field Piece and current players' color.</li>
--   </ul>
--   
--   Returns False when:
--   
--   <ul>
--   <li>color of starting Piece is different from players' (player can't
--   move opponents' piece)</li>
--   <li>color of starting Piece is the same as target Piece (player can't
--   capture own piece)</li>
--   <li>starting coordinates are the same as target coordinates (player
--   can't stand in a place in a loop)</li>
--   <li>type of the staring Piece is other then available (Piece is non
--   existing)</li>
--   </ul>
--   
--   | Returns True when Piece types' legality checkers returns True.
checkMove :: Board -> [Char] -> [Char] -> Piece -> Piece -> PColor -> Bool
kingChecker :: Board -> [Char] -> [Char] -> Bool
queenChecker :: Board -> [Char] -> [Char] -> Bool
rookChecker :: Board -> [Char] -> [Char] -> Bool
bishopChecker :: Board -> [Char] -> [Char] -> Bool
knightChecker :: Board -> [Char] -> [Char] -> Bool
pawnChecker :: Board -> [Char] -> [Char] -> PColor -> Bool

-- | <ul>
--   <li><i><tt>emptyPath</tt></i> Out of a list of legal moves'
--   coordinates, creates a path of unoccupied coordines, starting from the
--   starting coordinate to a first encountered occupied coordinate. Adds
--   the coordinate to the list, as it can be occupied by a Piece to
--   capture. Used by Queen, Rook and Bishop Piece type.</li>
--   </ul>
--   
--   <pre>
--   &gt;&gt;&gt; emptyPath ["6b", "6c", "6d", "6e", "6f"]
--   ["6b", "6c", "6d"]
--   </pre>
emptyPath :: [Field] -> [[Char]] -> [[Char]] -> [[Char]]

-- | <ul>
--   <li><i><tt>emptyField</tt></i> Out of a list of moves' coordinates,
--   checks if coordinates can exist as legal, by being unoccupied.</li>
--   </ul>
--   
--   Used by Pawn Piece type.
emptyFields :: [Field] -> [[Char]] -> [[Char]]

-- | <ul>
--   <li><i><tt>opponentsPiece</tt></i> Out of a list of moves'
--   coordinates, checks if coordinates can exist as legal, by being
--   occupied by an opponents' piece.</li>
--   </ul>
--   
--   Used by Pawn Piece type.
opponentsPiece :: [Field] -> [[Char]] -> PColor -> [[Char]]

-- | <ul>
--   <li><i><tt>allowDoubleMove</tt></i> Returns list of coordinates if the
--   pawn Piece stands on a starting position.</li>
--   </ul>
--   
--   Used by Pawn Piece type.
allowDoubleMove :: [[Char]] -> Char -> PColor -> [[Char]]


module MateChecker
checkMate :: Board -> [Char] -> Piece -> Bool
opponentKing :: [Field] -> PColor -> [Char]
